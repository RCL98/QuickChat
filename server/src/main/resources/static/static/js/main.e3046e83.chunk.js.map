{"version":3,"sources":["reducers/usersSlice.js","reducers/messagesSlice.js","app/websocketAPI.js","app/store.js","components/chat/MessageBox.js","components/chat/MessagesList.js","app/wsApi.js","components/chat/NewMessageBox.js","components/chat/ChatRoom.js","components/AppBar.js","components/chat/UsersList.js","App.js","index.js"],"names":["userSlice","createSlice","name","initialState","id","username","reducers","author","content","timestamp","Date","now","messagesSlice","messageAdded","state","action","push","payload","actions","websocketApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","build","getMessages","query","onCacheEntryAdded","arg","updateCachedData","cacheDataLoaded","cacheEntryRemoved","ws","WebSocket","listener","event","data","JSON","parse","console","log","draft","addEventListener","close","configureStore","useGetMessagesQuery","reducer","users","usersReducer","messages","messagesReducer","middleware","getDefaultMiddleware","concat","messageStyles","makeStyles","theme","paper","width","margin","wordWrap","float","props","textAlign","paddingLeft","paddingRight","messageBody","MessageBox","classes","Paper","className","color","Typography","variant","toTimeString","substr","messagesListStyles","messagesList","maxHeight","backgroundColor","overflowY","MessagesList","useSelector","map","msg","sessionId","axios","require","Stomp","userName","post","then","response","SockJS","over","connect","error","catch","newMessageBoxStyles","inputArea","padding","position","top","sendButton","left","NewMessageBox","useState","setContent","dispatch","useDispatch","Grid","container","item","xs","sm","md","lg","xl","TextField","label","fullWidth","maxRows","multiline","value","onChange","target","IconButton","size","onClick","nanoid","msgExt","client","publish","destination","body","stringify","SendSharp","fontSize","ChatRoom","MyAppBar","AppBar","Toolbar","edge","sx","mr","component","UsersList","renderUsers","user","darkTheme","createTheme","palette","type","lightTheme","App","isDark","ThemeProvider","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3046e83.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n  { id: \"1\", username: \"USER1\" },\n  { id: \"2\", username: \"USER2\" },\n  { id: \"3\", username: \"USER3\" },\n];\n\nconst userSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {},\n});\n\nexport default userSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n  {\n    id: 1,\n    author: \"User\",\n    content:\n      \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis\" +\n      +\"tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus,\" +\n      \"cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam\",\n    timestamp: Date.now() - 355,\n  },\n  {\n    id: 2,\n    author: \"Me\",\n    content:\n      \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\" +\n      +\"tenetur unddasdae suscipit, quam beatae rerum inventore consectetur, neque doloribus,\" +\n      \"cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam\",\n    timestamp: Date.now() - 255,\n  },\n  {\n    id: 3,\n    author: \"User\",\n    content:\n      \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis\" +\n      +\"tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus,\" +\n      \"cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam\",\n    timestamp: Date.now() - 155,\n  },\n  {\n    id: 4,\n    author: \"User\",\n    content:\n      \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis\" +\n      +\"tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus,\" +\n      \"cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam\",\n    timestamp: Date.now() - 55,\n  },\n  {\n    id: 5,\n    author: \"Me\",\n    content:\n      \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis\" +\n      +\"tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus,\" +\n      \"cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam\",\n    timestamp: Date.now(),\n  },\n];\n\nconst messagesSlice = createSlice({\n  name: \"messages\",\n  initialState,\n  reducers: {\n    messageAdded(state, action) {\n      state.push(action.payload);\n    },\n  },\n});\n\nexport const { messageAdded } = messagesSlice.actions;\n\nexport default messagesSlice.reducer;\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const websocketApi = createApi({\n  reducerPath: 'wsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:8080\"}),\n  endpoints: (build) => ({\n    getMessages: build.query({\n      query: () => `/messages`,\n      async onCacheEntryAdded(arg, { updateCachedData, cacheDataLoaded, cacheEntryRemoved }) {\n        // create a websocket connection when the cache subscription starts\n        const ws = new WebSocket(\"ws://localhost:8080/ws-quick\");\n       // console.log(\"Made connedtion!\");\n        try {\n          // wait for the initial query to resolve before proceeding\n          // await cacheDataLoaded;\n          //console.log(\"Ready to listen!\");\n          // when data is received from the socket connection to the server,\n          // if it is a message and for the appropriate channel,\n          // update our query result with the received message\n          const listener = (event) => {\n            const data = JSON.parse(event.data);\n            console.log(data);\n\n            updateCachedData((draft) => {\n              draft.push(data);\n            });\n          };\n\n          ws.addEventListener(\"message\", listener);\n        } catch {\n          // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\n          // in which case `cacheDataLoaded` will throw\n        }\n        // cacheEntryRemoved will resolve when the cache subscription is no longer active\n        await cacheEntryRemoved;\n        // perform cleanup steps once the `cacheEntryRemoved` promise resolves\n        ws.close();\n      },\n    }),\n  }),\n});\n\nexport const { useGetMessagesQuery } = websocketApi;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport usersReducer from \"../reducers/usersSlice\";\nimport messagesReducer from \"../reducers/messagesSlice\";\nimport { websocketApi } from \"./websocketAPI\";\n\nexport default configureStore({\n  reducer: {\n    users: usersReducer,\n    messages: messagesReducer,\n    [websocketApi.reducerPath]: websocketApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(websocketApi.middleware),\n});\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst messageStyles = makeStyles((theme) => {\n  return {\n    paper: {\n      width: \"50%\",\n      margin: \"2%\",\n      wordWrap: \"break-word\",\n      float: (props) => {\n        if (props.author === \"Me\") return \"left\";\n        return \"right\";\n      },\n    },\n    author: {\n      textAlign: \"left\",\n      paddingLeft: \"2%\",\n      margin: \"3%\",\n    },\n    timestamp: {\n      textAlign: \"right\",\n      paddingRight: \"2%\",\n      margin: \"3%\",\n    },\n    messageBody: {\n      textAlign: \"left\",\n      paddingLeft: \"2%\",\n      margin: \"5%\",\n    },\n  };\n});\n\nexport default function MessageBox(props) {\n  const classes = messageStyles(props);\n\n  return (\n    <Paper className={classes.paper} color=\"primary\">\n      <Typography variant=\"h6\" className={classes.author}>\n        {props.author}\n      </Typography>\n      <Typography variant=\"body2\" className={classes.messageBody}>\n        {props.content}\n      </Typography>\n      <Typography variant=\"subtitle2\" className={classes.timestamp}>\n        {new Date(props.timestamp).toTimeString().substr(0,5)}\n      </Typography>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport MessageBox from \"./MessageBox\";\nimport { useSelector } from \"react-redux\";\nimport { useGetMessagesQuery } from \"../../app/websocketAPI\";\nimport { Typography } from \"@mui/material\";\n\nconst messagesListStyles = makeStyles((theme) => {\n  return {\n    messagesList: {\n      maxHeight: \"100%\",\n      backgroundColor: \"#66ff66\",\n      overflowY: \"scroll\",\n    },\n  };\n});\n\nexport default function MessagesList() {\n  // const { data, error, isError, isLoading } = useGetMessagesQuery(\"test\");\n  const messages = useSelector((state) => state.messages);\n  const classes = messagesListStyles();\n\n  return (\n    <div className={classes.messagesList}>\n      {/* {isError ? (\n        <>There is an error: {error.messages}</>\n      ) : isLoading ? (\n        <>Loading...</>\n      ) : data ? ( */}\n        <ul>\n          {messages.map((msg) => (\n           <MessageBox key={msg.id} author={msg.author} content={msg.content} timestamp={msg.timestamp} />\n          ))}\n        </ul>\n     {/* ) : null} */}\n    </div>\n  );\n}\n\n{/* <MessageBox key={msg.id} author={msg.author} content={msg.content} timestamp={msg.timestamp} /> */}\n","import SockJS from \"sockjs-client/dist/sockjs\";\n// import {Stomp} from \"stomp-websocket/lib/stomp\";\n\n// import { Client, Message } from '@stomp/stompjs';\nimport store from \"./store\";\nimport { messageAdded } from \"../reducers/messagesSlice\";\n\nconst axios = require('axios');\nvar Stomp = require('stompjs');//require('@stomp/stompjs');\n// var SockJS = require('sockjs');\nconst baseUrl = \"http://localhost:8080\";\n\nconst userName = \"TestUser\";\nvar sessionId;\nvar client;\nvar subscription;\n\nfunction messageFilter(message) {\n    // called when the client receives a STOMP message from the server\n    if (message.body) {\n      alert('got message with body ' + message.body);\n      console.log(message.body);\n      store.dispatch(messageAdded(message));\n    } else {\n      alert('got empty message');\n    }\n  };\n\n\nfunction connectToServer(){\n axios.post(baseUrl + '/user/create', {\n    name: userName,\n    timestamp: Date.now(),\n  })\n  .then(function (response) {\n    sessionId = response.data.id;\n    console.log(sessionId);\n    var ws = new SockJS(`http://localhost:8080/ws-quick?sessionId=${sessionId}`);\n    var client = Stomp.over(ws);\n    var connectCallback = function() {\n        console.log(\"Connected\");\n    };\n    var error_callback = function(error) {\n        console.log(error);\n    };\n    client.connect({}, connectCallback, error_callback);\n    // client = new StompJs.Client({\n    //     brokerURL: `ws://localhost:9000/ws-quick?sessionId=${sessionId}`,\n    //     debug: function (str) {\n    //       console.log(str);\n    //     },\n    //     reconnectDelay: 0,\n    //     // heartbeatIncoming: 4000,\n    //     // heartbeatOutgoing: 4000,\n    //     onConnect: (frame) => {\n    //         // Do something, all subscribes must be done is this callback\n    //         // This is needed because this will be executed after a (re)connect\n    //         console.log(\"This was in onConnect!\");\n    //         subscription = client.subscribe(`/${sessionId}/usertell`, messageFilter);\n    //       },\n    //     onStompError: (frame) => {\n    //         // Will be invoked in case of error encountered at Broker\n    //         // Bad login/passcode typically will cause an error\n    //         // Complaint brokers will set `message` header with a brief message. Body may contain details.\n    //         // Compliant brokers will terminate the connection after any error\n    //         console.log('Broker reported error: ' + frame.headers['message']);\n    //         console.log('Additional details: ' + frame.body);\n    //       }\n    //   });\n\n    //   client.activate();\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n};\n\nconnectToServer();\n\nexport  {userName, baseUrl, client};\n\n\n","import React, { useState } from \"react\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { SendSharp } from \"@mui/icons-material\";\n\nimport { useDispatch } from \"react-redux\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { messageAdded } from \"../../reducers/messagesSlice\";\nimport { makeStyles } from \"@mui/styles\";\nimport { userName } from \"../../app/wsApi\";\n\n\nconst newMessageBoxStyles = makeStyles((theme) => {\n  return {\n    inputArea: {\n      width: \"100%\",\n      padding: \"20px\",\n      position: \"relative\",\n      top: \"15%\",\n    },\n    sendButton: {\n      position: \"relative\",\n      left: \"20%\",\n      top: \"5%\",\n    },\n  };\n});\n\nexport default function NewMessageBox(props) {\n  const classes = newMessageBoxStyles();\n\n  const [content, setContent] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const onContentChanged = (event) => setContent(event.target.value);\n  const onSumbit = () => {\n    if (content) {\n      const msg = { id: nanoid(), author: \"Me\", content: content, timestamp: Date.now() }\n      dispatch(messageAdded(msg));\n      const msgExt = { id: nanoid(), author: userName, content: content, timestamp: Date.now() }\n      props.client.publish({\n        destination: '/chat',\n        body: JSON.stringify(msgExt),\n      });\n    }\n    setContent(\"\");\n  };\n\n  return (\n    <Grid container className={classes.inputArea}>\n      <Grid item xs={11} sm={11} md={11} lg={11} xl={11}>\n        <TextField id=\"outlined-multiline-flexible\" label=\"Your message\" fullWidth maxRows={2} multiline value={content} onChange={onContentChanged} />\n      </Grid>\n      <Grid item xs={1} sm={1} md={1} lg={1} xl={1}>\n        <IconButton aria-label=\"send\" color=\"primary\" size=\"small\" className={classes.sendButton} onClick={onSumbit}>\n          <SendSharp fontSize=\"large\" />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport MessagesList from \"./MessagesList\";\nimport NewMessageBox from \"./NewMessageBox\";\nimport \"../../styles/ChatRoom.css\";\n\nimport { useDispatch } from \"react-redux\";\nimport { messageAdded } from \"../../reducers/messagesSlice\";\n\nexport default function ChatRoom(props) {\n  // const dispatch = useDispatch();\n\n  // props.socket.onmessage = (event) => {\n  //   if (event.data) {\n  //     console.log(event);\n  //     const msg = JSON.parse(event.data);\n  //     dispatch(messageAdded(msg));\n  //   }\n  // };\n\n  return (\n    <div className=\"ChatRoomContainer\">\n      <div className=\"MessagesList\">\n        <MessagesList />\n      </div>\n      <div className=\"NewMessageBox\">\n        <NewMessageBox client={props.client} userName={props.userName}/>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\n\nexport default function MyAppBar(props) {\n    return (\n      <AppBar position=\"fixed\" className={props.className}>\n        <Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n            Photos\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\n\nexport default function UsersList() {\n  const users = useSelector((state) => state.users);\n\n  const renderUsers = users.map((user) => (\n    <Paper key={user.id}>\n      <Typography variant=\"h5\"> {user.username} </Typography>\n    </Paper>\n  ));\n\n  return (\n    <section>\n      <Typography variant=\"h2\"> Online Users </Typography>\n      {renderUsers}\n    </section>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\n\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport ChatRoom from \"./components/chat/ChatRoom\";\nimport MyAppBar from \"./components/AppBar\";\nimport UsersList from \"./components/chat/UsersList\";\n\nimport {client, baseUrl, userName} from \"./app/wsApi\";\n\n// App material themes\nconst darkTheme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst lightTheme = createTheme({});\n\nexport default function App() {\n  const [isDark] = useState(false);\n  \n    return (\n      <ThemeProvider theme={isDark ? { ...darkTheme } : { ...lightTheme }}>\n        <Provider store={store}>\n          <MyAppBar />\n          <div className=\"AppContainer\">\n            <div className=\"Groups\">\n              <UsersList />\n            </div>\n\n            <div className=\"ChatRoom\">\n              <ChatRoom client={client} userName={userName}/>\n            </div>\n          </div>\n        </Provider>\n      </ThemeProvider>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}